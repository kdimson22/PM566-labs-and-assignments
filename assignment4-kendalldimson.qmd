---
title: "Assignment 4"
author: "Kendall Dimson"
format: html
editor: visual
embed-resources: TRUE
---
```{r, message=FALSE, warning=FALSE }
#Set-up
options(repos = c(CRAN = "https://cloud.r-project.org/"))
```

##HPC
Make things run faster

```{r}
# Total row sums
fun1 <- function(mat) {
  n <- nrow(mat)
  ans <- double(n) 
  for (i in 1:n) {
    ans[i] <- sum(mat[i, ])
  }
  ans
}

fun1alt <- function(mat) {
  rowSums(mat)
}

# Cumulative sum by row
fun2 <- function(mat) {
  n <- nrow(mat)
  k <- ncol(mat)
  ans <- mat
  for (i in 1:n) {
    for (j in 2:k) {
      ans[i,j] <- mat[i, j] + ans[i, j - 1]
    }
  }
  ans
}

fun2alt <- function(mat) {
  t(apply(mat,1,cumsum))
}
```

## Question 1
Using the dataset generated below (dat), check that the output of both of your new functions matches the output of the original functions. Then use microbenchmark to check that your version is actually faster.

```{r}
# Use the data with this code
set.seed(2315)
dat <- matrix(rnorm(200 * 100), nrow = 200)

# Test for the first
microbenchmark::microbenchmark(
  fun1(dat),
  fun1alt(dat), unit = "relative"
)

# Test for the second
microbenchmark::microbenchmark(
  fun2(dat),
  fun2alt(dat), unit = "relative"
)
```

Make things run faster with parallel computing
The following function allows simulating pi:
```{r}
sim_pi <- function(n = 1000, i = NULL) {
  p <- matrix(runif(n*2), ncol = 2)
  mean(rowSums(p^2) < 1) * 4
}

# Here is an example of the run
set.seed(156)
sim_pi(1000) # 3.132
```

In order to get accurate estimates, we can run this function multiple times, with the following code:
```{r}
# This runs the simulation a 4,000 times, each with 10,000 points
set.seed(1231)
system.time({
  ans <- unlist(lapply(1:4000, sim_pi, n = 10000))
  print(mean(ans))
})
```

## Question 2
Rewrite the previous code using parLapply() (or your parallelization method of choice) to parallelize it. Run the code once, using system.time(), to show that your version is faster.

```{r}
library(parallel)
sim_pi <- function(n = 1000, i = NULL) {
  p <- matrix(runif(n*2), ncol = 2)
  mean(rowSums(p^2) < 1) * 4
}

set.seed(1231)

n_cores <- detectCores() - 1 
cl <- makeCluster(n_cores)

clusterExport(cl, varlist = "sim_pi")

system.time({
  ans <- parallel::parLapply(cl, 1:4000, function(i) sim_pi (n = 10000))
})

ans<- as.numeric(ans)
print(mean(ans))

parallel::stopCluster(cl)
```

## SQL

```{r}
install.packages(c("RSQLite", "DBI"))

library(RSQLite)
library(DBI)

# Initialize a temporary in memory database
con <- dbConnect(SQLite(), ":memory:")

# Download tables
film <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/film.csv")
film_category <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/film_category.csv")
category <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/category.csv")

# Copy data.frames to database
dbWriteTable(con, "film", film)
dbWriteTable(con, "film_category", film_category)
dbWriteTable(con, "category", category)
```

When you write a new chunk, remember to replace the r with sql, connection=con. Some of these questions will require you to use an inner join. Read more about them here https://www.w3schools.com/sql/sql_join_inner.asp

## Question 3
How many movies are available in each rating category?
```{sql, connection=con}
SELECT 
    f.rating, 
    COUNT(*) AS movie_count
FROM 
    film f
GROUP BY 
    f.rating;

```
There are 223 movies with PG-13 rating, 210 movies with NC-17 rating, 195 movies with R rating, 194 movies with PG rating, and 180 movies with G rating.

## Question 4
What is the average replacement cost and rental rate for each rating category?
```{sql, connection=con}
SELECT 
    f.rating,
    AVG(f.replacement_cost) AS avg_replacement_cost,
    AVG(f.rental_rate) AS avg_rental_rate
FROM 
    film f
GROUP BY 
    f.rating;

```
G rating: average replacement cost is $20.12 and rental rate of 2.91.
NC-17 rating: average replacement cost of $20.14 and rental rate of 2.97.
PG rating: Average replacement cost of $18.96 and rental rate of 3.05.
PG-13 rating: Average replacement cost of 20.40 and rental rate of 3.03.
R Rating: Average replacement cost of $20.23 and rental rate of 2.94.
## Question 5
Use table film_category together with film to find how many films there are with each category ID.
```{sql, connection=con}
SELECT 
    fc.category_id,
    COUNT(f.film_id) AS film_count
FROM 
    film_category fc
JOIN 
    film f ON fc.film_id = f.film_id
GROUP BY 
    fc.category_id;
```

## Question 6
Incorporate category table into the answer to the previous question to find the name of the most popular category.
```{sql, connection=con}
SELECT 
    c.name AS category_name,
    COUNT(f.film_id) AS film_count
FROM 
    film_category fc
JOIN 
    film f ON fc.film_id = f.film_id
JOIN 
    category c ON fc.category_id = c.category_id
GROUP BY 
    fc.category_id
ORDER BY 
    film_count DESC;

```
The most popular category is Sports, with 74 films.
